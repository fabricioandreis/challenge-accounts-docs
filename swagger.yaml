openapi: '3.0.2'
info:
  version: 0.1.0
  title: Challenge Accounts
  description: >
    **Description**: OpenAPI specification (Swagger) for the challenge related to accounts
servers:
  - description: Development
    url: http://localhost:3000

tags:
  - name: Accounts
  - name: People

paths:
  /people:
    get:
      tags:
        - People
      summary: List all People
      description: Returns a list of all Natural Persons (an empty list if no Person is found).
      responses:
        200:
          description: People found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NaturalPerson'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - People
      summary: Create a Natural Person
      description: Create a Natural Person
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NaturalPersonCreate'
      responses:
        201:
          description: Natural Person created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NaturalPerson'
        400:
          $ref: '#/components/responses/BadRequest'
        409:
          $ref: '#/components/responses/NaturalPersonAlreadyExists'
        500:
          $ref: '#/components/responses/InternalServerError'
  /accounts:
    get:
      tags:
        - Accounts
      summary: List all accounts
      description: Returns a list of all accounts (an empty list if no account is found).
      responses:
        200:
          description: Accounts found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - Accounts
      summary: Create an account
      description: Create an account for a Natural Person
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreate'
      responses:
        201:
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        400:
          $ref: '#/components/responses/BadRequest'
        409:
          $ref: '#/components/responses/AccountForPersonAlreadyExists'
        500:
          $ref: '#/components/responses/InternalServerError'
  /accounts/{idConta}:
    head:
      tags:
        - Accounts
      summary: Check if Account exists
      description: Check if an Account exists
      parameters:
      - name: idConta
        in: path
        description: Id of the Account
        required: true
        schema:
          type: string
      responses:
        200:
          description: Account Acount
        400:
          description: Bad Request
        404:
          description: Account not found
    get:
      tags:
        - Accounts
      summary: Get an Account
      description: Get an specific Account for a Natural Person
      parameters:
      - name: idConta
        in: path
        description: Id of the Account
        required: true
        schema:
          type: string
      responses:
        200:
          description: Found Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/AccountNotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /accounts/{idConta}/block:
    patch:
      tags:
        - Accounts
      summary: Block an Account
      description: Block an specific Account for a Natural Person
      parameters:
      - name: idConta
        in: path
        description: Id of the Account
        required: true
        schema:
          type: string
      responses:
        201:
          description: Account blocked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/AccountNotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /accounts/{idConta}/unblock:
    patch:
      tags:
        - Accounts
      summary: Unblock an Account
      description: Unblock an specific Account for a Natural Person
      parameters:
      - name: idConta
        in: path
        description: Id of the Account
        required: true
        schema:
          type: string
      responses:
        201:
          description: Account unblocked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/AccountNotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /accounts/{idConta}/deposit:
    post:
      tags:
        - Accounts
      summary: Deposit into Account
      description: Deposit money into an Account for a Natural Person
      parameters:
      - name: idConta
        in: path
        description: Id of the Account
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositCreate'
      responses:
        201:
          description: Deposit created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/TransactionForbiddenForAccountIsBlocked'
        404:
          $ref: '#/components/responses/AccountNotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /accounts/{idConta}/withdraw:
    post:
      tags:
        - Accounts
      summary: Withdraw from Account
      description: Withdraw money from an Account for a Natural Person
      parameters:
      - name: idConta
        in: path
        description: Id of the Account
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawCreate'
      responses:
        201:
          description: Withdraw created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/AccountNotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /accounts/{idConta}/balance:
    get:
      tags:
        - Accounts
      summary: Get Account balance
      description: Returns the balance of an Account
      parameters:
      - name: idConta
        in: path
        description: Id of the Account
        required: true
        schema:
          type: string
      responses:
        200:
          description: Balance of the Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountBalance'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/AccountNotFound'
        500:
          $ref: "#/components/responses/InternalServerError"
  /accounts/{idConta}/statement:
    get:
      tags:
        - Accounts
      summary: Get the statement of an Account
      description: Get the statement of an Account for a Natural Person
      parameters:
      - name: idConta
        in: path
        description: Id of the Account
        required: true
        schema:
          type: string
      - name: startDate
        in: query
        description: Start date to query for the statement
        example: "2021-05-10"
        schema:
          type: string
          format: date
      - name: endDate
        in: query
        description: End date to query for the statement
        example: "2021-05-12"
        schema:
          type: string
          format: date
      responses:
        200:
          description: Statement of the Account
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/AccountNotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

components:
  parameters:
    AccountIdParam:
      name: account_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/AccountId"

  schemas:
    Account:
      description: All data of an Account
      allOf:
        - $ref: '#/components/schemas/AccountId'
        - type: object
          properties:
            idPessoa:
              type: integer
              description: Person unique identifier
              format: int32
              example: 454145
            saldo:
              type: number
              description: Current balance of the Account
              format: double
              example: 543.97
            limiteSaqueDiario:
              type: number
              description: Daily withdraw limit
              format: double
              example: 900.00
            flagAtivo:
              type: boolean
              description: Is the current Account active?
              example: true
            tipoConta:
              type: integer
              description: Type of the Account
              format: int32
              example: 12
            dataCriacao:
              type: string
              description: Creation date of an Account
              example: 2021-01-01
              format: date
    AccountId:
      description: Id of an Account
      type: object
      required:
      - idConta
      properties:
        idConta:
          type: integer
          description: Account unique identifier
          format: int32
          example: 51344
    AccountCreate:
      description: Data required do create an Account
      type: object
      required:
      - idPessoa
      - limiteSaqueDiario
      properties:
        idPessoa:
          type: integer
          description: Person unique identifier
          format: int32
          example: 454145
        limiteSaqueDiario:
          type: number
          description: Daily withdraw limit
          format: double
          example: 900.00
    AccountBalance:
      description: Balance of an Account
      type: object
      required:
      - saldo
      properties:
        saldo:
          type: number
          description: Current balance of the Account
          format: double
          example: 543.97
    Transaction:
      description: All data of a Transaction
      type: object
      properties:
        idTransacao:
          type: integer
          description: Id of the Transaction
          format: int32
          example: 58293
        idConta:
          type: integer
          description: Id of the Account where the Transaction was performed
          format: int32
          example: 58293
        valor:
          type: number
          description: Value of the Deposit
          format: double
          example: 45.37
        dataTransacao:
          type: string
          description: Timestamp of the Transaction settlement (notation according to RFC 3339 at https://datatracker.ietf.org/doc/html/rfc3339)
          example: 2020-07-21T17:32:28Z
          format: date-time
    BlockCreate:
      description: Data required do create a Deposit into an Account
      allOf:
        - $ref: '#/components/schemas/AccountId'
        - type: object
          required:
          - valor
          properties:
            valor:
              type: number
              description: Value of the Deposit
              format: double
              example: 45.37
    DepositCreate:
      description: Data required do create a Deposit into an Account
      type: object
      required:
      - valor
      properties:
        valor:
          type: number
          description: Value of the Deposit
          format: double
          example: 45.37
    WithdrawCreate:
      description: Data required do create a Withdraw from an Account
      type: object
      required:
      - valor
      properties:
        valor:
          type: number
          description: Value of the Withdraw
          format: double
          example: 34.98
    NaturalPersonId:
      description: Id of a Natural Person
      type: object
      required:
      - idPessoa
      properties:
        idConta:
          type: integer
          description: Natural Person unique identifier
          format: int32
          example: 423
    NaturalPerson:
      description: All data of a Natural Person
      allOf:
        - $ref: '#/components/schemas/NaturalPersonId'
        - type: object
          properties:
            nome:
              type: string
              description: Name of a Natural Person
              example: João da Silva
            cpf:
              type: string
              description: CPF (id number) of a Natural Person
              format: double
              example: 543.97
            dataNascimento:
              type: string
              description: Date of brith of a Natural Person
              example: 1987-10-13
              format: date
    NaturalPersonCreate:
      description: Data required do create a Natural Person
      type: object
      required:
      - nome
      - cpf
      - dataNascimento
      properties:
        nome:
          type: string
          description: Name of a Natural Person
          example: João da Silva
        cpf:
          type: string
          description: CPF (id number) of a Natural Person
          example: "12345678901"
        dataNascimento:
          type: string
          description: Date of brith of a Natural Person
          example: 1987-10-13
          format: date
    ErrorResponse:
      description: Default error response of a request
      type: object
      required:
      - statusCode
      - message
      properties:
        statusCode:
          type: integer
          title: HTTP status code
          description: The type of error
        error:
          type: string
          title: Error
          description: The type of error
          example: Bad Request
        message:
          type: array
          title: Error message
          example: ['Invalid request params']

  responses:
    BadRequest:
      description: Invalid Request
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Internal server error
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    AccountNotFound:
      description: Account was not found
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    AccountForPersonAlreadyExists:
      description: An account for this person already exists.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    TransactionForbiddenForAccountIsBlocked:
      description: The Transaction is forbidden because the Account is blocked.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NaturalPersonNotFound:
      description: Natural Person not found
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NaturalPersonAlreadyExists:
      description: A Natural Person for this CPF already exists.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
